import 'dart:convert';

import 'package:assistantstroke/page/forget_password/home_otp.dart';
// import 'package:assistantstroke/page/login/home_login.dart';
import 'package:assistantstroke/services/api_service.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class SignController {
  late SharedPreferences prefs;

  final String username;
  final String password;
  final String email;
  final String phone;
  final String dob;
  final String sex;

  SignController({
    required this.username,
    required this.email,
    required this.phone,
    required this.password,
    required this.dob,
    required this.sex,
  });

  // bool _isLoading = false;
  Future<void> init() async {
    prefs = await SharedPreferences.getInstance(); // L·∫•y SharedPreferences
  }

  Future<void> sign(BuildContext context) async {
    await init();
    final String url = ApiEndpoints.register;

    try {
      print(
        'üîÑ ƒêang g·ª≠i request ƒëƒÉng k√Ω v·ªõi: ten $username / $password / $sex / $dob / email $email / $phone ',
      );

      // Chuy·ªÉn DateOfBirth th√†nh chu·ªói yyyy-MM-dd
      String formattedDob = DateTime.parse(dob).toIso8601String().split('T')[0];

      final response = await http.post(
        Uri.parse(url),
        body: jsonEncode({
          "Username": email,
          "Password": password,
          // "Role": "User",
          "Email": email,
          "Phone": phone,
          "PatientName": username,
          "DateOfBirth": formattedDob, // ƒê·ªãnh d·∫°ng ƒë√∫ng yyyy-MM-dd
          "Gender":
              sex == "Male", // N·∫øu sex l√† "Male" th√¨ true, ng∆∞·ª£c l·∫°i false
        }),
        headers: {'Content-Type': 'application/json'},
      );

      print('üîç Response Code: ${response.statusCode}');
      print('üì© Response Body: ${response.body}');

      if (response.statusCode == 200) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder:
                (context) => HomeOtp(
                  username: username,
                  email: email,
                  phone: phone,
                  password: password,
                  dob: dob,
                  sex: sex,
                ),
          ),
        );
        print('‚úÖ ƒê√£ g·ª≠i m√£ ƒë·∫øn gmail');
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‚úÖ ƒê√£ g·ª≠i m√£ ƒë·∫øn gmail!')));
        // Navigator.pushReplacement(
        //   context,
        //   MaterialPageRoute(builder: (context) => HomeOtp()),
        // );
      } else if (response.statusCode == 400) {
        print('‚ùå T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!');
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‚ùå T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!')));
      } else {
        print('‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh! Status Code: ${response.statusCode}');
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('L·ªói m√°y ch·ªß, th·ª≠ l·∫°i sau!')));
      }
    } catch (error) {
      print('üö® L·ªói k·∫øt n·ªëi API: $error');
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!')));
    }
  }
}
